(define (distinct? lst)
	(cond ((null? lst) true)
		  ((memq (car lst) (cdr lst)) false)
		  (else (distinct? (cdr lst)))))
		  	  
(define (xor b1 b2)
	(define (boolean->num b)
		(if b 1 0))
	(= 1 (+ (boolean->num b1) (boolean->num b2))))		  
		  
(define (liars)
  (let ((betty (amb 1 2 3 4 5))
        (ethel (amb 1 2 3 4 5))
        (joan (amb 1 2 3 4 5))
        (kitty (amb 1 2 3 4 5))
        (marry (amb 1 2 3 4 5)))
    (require
     (distinct? (list betty ethel joan kitty marry)))
    (require (xor (= kitty 2) (= betty 3)))
    (require (xor (= ethel 1) (= joan 2)))
    (require (xor (= joan 3) (= ethel 5)))
	(require (xor (= kitty 2) (= marry 4)))
	(require (xor (= marry 4) (= betty 1)))
    (list (list 'betty betty)
          (list 'ethel ethel)
          (list 'joan joan)
          (list 'kitty kitty)
          (list 'marry marry))))
		  
; result: ((betty 3) (ethel 5) (joan 2) (kitty 1) (marry 4))		  