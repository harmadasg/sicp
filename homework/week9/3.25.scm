#lang sicp

(define (make-table)
  (let ((local-table (list '*table*)))
    (define (last-key? keys)
      (null? (cdr keys)))
    (define (lookup keys)
      (if (null? keys)
          (error "keys can't be null"))
      (define (loop keys table)
        (let ((record (assoc (car keys) (cdr table))))
          (cond
            ((not record) false)
            ((last-key? keys) (cdr record))
            ((pair? (cdr record))  (loop (cdr keys) record))
            (else false))))
      (loop keys local-table))
    (define (insert! keys value)
      (if (null? keys)
          (error "keys can't be null"))
      (define (loop keys value table)             
        (let ((record (assoc (car keys) (cdr table))))
          (cond
            ((last-key? keys)
             (if record
                 (set-cdr! record value)
                 (set-cdr! table
                           (cons (cons (car keys) value)
                                 (cdr table)))))
            ((not record)
             (let ((subtable (list (car keys))))
               (set-cdr! table (cons subtable (cdr table)))
               (loop (cdr keys) value subtable)))
            (else (loop (cdr keys) value record)))))                            
      (loop keys value local-table)
      'ok)    
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))

(define operation-table (make-table))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc!))