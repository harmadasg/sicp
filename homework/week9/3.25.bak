#lang sicp

(define (make-table)
  (let ((local-table (list '*table*)))
    (define (lookup keys)
      (if (null? keys)
          (error "keys can't be null"))
      (define (loop keys table)
        (let ((record (assoc (car keys) (cdr table))))
          (cond
            ((not record) false)
            ((null? (cdr keys)) (cdr record))
            ((pair? (cdr record))  (loop (cdr keys) record))
            (else false))))
      (loop keys local-table))
    (define (insert! key-1 key-2 value)
      (let ((subtable (assoc key-1 (cdr local-table))))
        (if subtable
            (let ((record (assoc key-2 (cdr subtable))))
              (if record
                  (set-cdr! record value)
                  (set-cdr! subtable
                            (cons (cons key-2 value)
                                  (cdr subtable)))))
            (set-cdr! local-table
                      (cons (list key-1
                                  (cons key-2 value))
                            (cdr local-table)))))
      'ok)    
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))

(define operation-table (make-table))
(define get (operation-table 'lookup-proc))
(define put (operation-table 'insert-proc!))